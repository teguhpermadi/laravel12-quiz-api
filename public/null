Question::latest()->get()
Question::latest()->first()
Question::latest()->first()->answer;
Question::latest()->first()->answer();
Question::latest()->first()->answer()->get();
Question::latest()->first()->with('answer')->get();
$q = Question::latest()->first();

$q= Question::find('01jw18ycccj5kef2yfbsm5fanc');

$q= Question::with('answer')->find('01jw18ycccj5kef2yfbsm5fanc');
Question::factory()
  ->count(10)
  ->state(['question_type' => QuestionTypeEnum::MULTIPLE_CHOICE])
  ->has(
  MultipleChoice::factory()
  ->count(3)
  ->state(['is_correct' => false]),
  'answerable'
)
  ->has(
  MultipleChoice::factory()
  ->state(['is_correct' => true]),
  'answerable'
)
  ->create();

dd(Question::with('answerable')->get()->toArray());
use App\Models\MultipleChoice;
use App\Models\Question;


Question::factory()
  ->count(10)
  ->state(['question_type' => QuestionTypeEnum::MULTIPLE_CHOICE])
  ->has(
  MultipleChoice::factory()
  ->count(3)
  ->state(['is_correct' => false]),
  'answerable'
)
  ->has(
  MultipleChoice::factory()
  ->state(['is_correct' => true]),
  'answerable'
)
  ->create();

dd(Question::with('answerable')->get()->toArray());
use App\Models\MultipleChoice;
use App\Models\Question;
use App\Enums\QuestionTypeEnum;


Question::factory()
  ->count(10)
  ->state(['question_type' => QuestionTypeEnum::MULTIPLE_CHOICE])
  ->has(
  MultipleChoice::factory()
  ->count(3)
  ->state(['is_correct' => false]),
  'answerable'
)
  ->has(
  MultipleChoice::factory()
  ->state(['is_correct' => true]),
  'answerable'
)
  ->create();

dd(Question::with('answerable')->get()->toArray());
